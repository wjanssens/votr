swagger: '2.0'
info:
  title: Vote API
  description: This is an API specification to support voting.
  version: v1.0
schemes:
  - https
paths:
  /api/ballots:
    get:
      tags:
        - Voters / Public
      summary: All the ballots for a voter
      produces:
        - application/json
      parameters:
        - name: voter
          in: query
          required: false
          type: string
          description: only return ballots for a particular voter
        - name: ward
          in: query
          required: false
          type: string
          description: focus on a particular ward
        - name: q
          in: query
          required: false
          type: string
          description: free-form text search
        - name: offset
          in: query
          required: false
          type: integer
          default: 0
        - name: limit
          in: query
          required: false
          type: integer
          default: 25
        responses:
        '200':
          description: A list of ballots (potentially nothing depending on access controls).
          schema:
            allOf:
              - $ref: '#/definitions/response'
              - properties:
                  ballots:
                    type: array
                    items:
                      type: '#/definitions/voter_ballot'
    put:
      tags:
        - Voters
      summary: Cast or update ballots
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: id
          in: path
          description: 'Ballot ID'
          required: true
          type: string
        - name: votes
          in: body
          description: A ballot with votes.
          schema:
            type: object
            additionalProperties:
              type: string
            example:
              ballot_id_1: 3 2 5
              ballot_id_2: 1=2
      responses:
        '201':
          description: Created
          schema:
            $ref: '#/definitions/response'
        '400':
          description: Bad request
          schema:
            $ref: '#/definitions/response'

  /api/ballots/{id}/votes:
    get:
      tags:
        - Public
      summary: A log of all votes cast
      produces:
        - application/json
        - text/plain
      parameters:
        - name: id
          in: path
          required: true
          type: string
      responses:
        '200':
          description: OK
          schema:
            allOf:
              - $ref: '#/definitions/response'
              - properties:
                  votes:
                    type: array
                    items:
                      type: string

  /api/ballots/{id}/result:
    get:
      tags:
        - Public
      summary: Election results for a ballot
      produces:
        - application/json
      parameters:
        - name: id
          in: path
          required: true
          type: string
      responses:
        '200':
          description: OK
          schema:
            allOf:
              - $ref: '#/definitions/response'
              - properties:
                  results:
                    type: array
                    items:
                      $ref: '#/definitions/result'

  /admin/wards:
    get:
      tags:
        - CRUD Elections / Wards
      summary: All elections (top-level wards) and their child wards
      produces:
        - application/json
      responses:
        '200':
          description: OK
          schema:
            allOf:
              - $ref: '#/definitions/response'
              - properties:
                  wards:
                    type: array
                    items:
                      $ref: '#/definitions/ward'
        '401':
          description: Unauthorized
          schema:
            $ref: '#/definitions/response'
    post:
      tags:
        - CRUD Elections / Wards
      summary: Add a new election
      parameters:
        - name: ward
          in: body
          schema:
            $ref: '#/definitions/ward'
      responses:
        '201':
          description: Created
          schema:
            $ref: '#/definitions/response'
        '401':
          description: Unauthorized
          schema:
            $ref: '#/definitions/response'

  /admin/wards/{id}:
    put:
      tags:
        - CRUD Elections / Wards
      summary: Update a ward
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: id
          in: path
          required: true
          type: string
        - name: ward
          in: body
          description: A ward
          schema:
            $ref: '#/definitions/ward'
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/response'
        '401':
          description: Unauthorized
          schema:
            $ref: '#/definitions/response'
    delete:
      tags:
        - CRUD Elections / Wards
      summary: Delete a ward
      produces:
        - application/json
      parameters:
        - name: id
          in: path
          required: true
          type: string
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/response'
        '401':
          description: Unauthorized
          schema:
            $ref: '#/definitions/response'

  /admin/wards/{id}/ballots:
    get:
      tags:
        - CRUD Ballots
      summary: Ballots for a ward
      produces:
        - application/json
      parameters:
        - name: id
          in: path
          required: true
          type: string
      responses:
        '200':
          description: OK
          schema:
            allOf:
              - $ref: '#/definitions/response'
              - properties:
                  ballots:
                    type: array
                    items:
                      $ref: '#/definitions/ballot'
        '401':
          description: Unauthorized
          schema:
            $ref: '#/definitions/response'
    post:
      tags:
        - CRUD Ballots
      summary: Add a ballot to a ward
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: id
          in: path
          required: true
          type: string
        - name: ballot
          in: body
          schema:
            $ref: '#/definitions/ballot'
      responses:
        '201':
          description: Created
          schema:
            $ref: '#/definitions/response'
        '401':
          description: Unauthorized
          schema:
            $ref: '#/definitions/response'

  /admin/wards/{id}/voters:
    get:
      tags:
        - CRUD Voters
      summary: Voters for a ward
      produces:
        - application/json
      parameters:
        - name: id
          in: path
          required: true
          type: string
        - name: offset
          in: query
          required: false
          type: integer
        - name: limit
          in: query
          required: false
          type: integer
      responses:
        '200':
          description: OK
          schema:
            allOf:
              - $ref: '#/definitions/response'
              - properties:
                  voters:
                    type: array
                    items:
                      $ref: '#/definitions/voter'
        '401':
          description: Unauthorized
          schema:
            $ref: '#/definitions/response'
    post:
      tags:
        - CRUD Voters
      summary: Add a voter to a ward
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: id
          in: path
          required: true
          type: string
        - name: voter
          in: body
          schema:
            $ref: '#/definitions/voter'
      responses:
        '201':
          description: Created
          schema:
            $ref: '#/definitions/response'
        '401':
          description: Unauthorized
          schema:
            $ref: '#/definitions/response'
    put:
      tags:
        - CRUD Voters
      summary: Import (replace) voters for an election
      consumes:
        - application/json
        - application/yaml
        - application/csv
      produces:
        - application/json
      parameters:
        - name: id
          description: top level ward (election) identifier
          in: path
          required: true
          type: string
        - name: voters
          in: body
          schema:
            type: array
            items:
              $ref: '#/definitions/voter'
      responses:
        '201':
          description: Created
          schema:
            $ref: '#/definitions/response'
        '401':
          description: Unauthorized
          schema:
            $ref: '#/definitions/response'

  /admin/voters/{id}:
    put:
      tags:
        - CRUD Voters
      summary: Update a voter
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: id
          in: path
          required: true
          type: string
        - name: voter
          in: body
          description: A voter
          schema:
            $ref: '#/definitions/voter'
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/response'
        '401':
          description: Unauthorized
          schema:
            $ref: '#/definitions/response'
    delete:
      tags:
        - CRUD Voters
      summary: Delete a voter
      produces:
        - application/json
      parameters:
        - name: id
          in: path
          required: true
          type: string
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/response'

  /admin/ballots/{id}:
    put:
      tags:
        - CRUD Ballots
      summary: Update a ballot
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: id
          in: path
          required: true
          type: string
        - name: ballot
          in: body
          description: A ballot
          schema:
            $ref: '#/definitions/ballot'
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/response'
        '401':
          description: Unauthorized
          schema:
            $ref: '#/definitions/response'
    delete:
      tags:
        - CRUD Ballots
      summary: Delete a ballot
      produces:
        - application/json
      parameters:
        - name: id
          in: path
          required: true
          type: string
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/response'
        '401':
          description: Unauthorized
          schema:
            $ref: '#/definitions/response'

  /admin/ballots/{id}/candidates:
    get:
      tags:
        - CRUD Candidates
      summary: Candidates for a ballot
      produces:
        - application/json
      parameters:
        - name: id
          in: path
          required: true
          type: string
      responses:
        '200':
          description: OK
          schema:
            allOf:
              - $ref: '#/definitions/response'
              - properties:
                  candidates:
                    type: array
                    items:
                      $ref: '#/definitions/candidate'
        '401':
          description: Unauthorized
          schema:
            $ref: '#/definitions/response'
    post:
      tags:
        - CRUD Candidates
      summary: Add a candidate to a ballot
      parameters:
        - name: id
          in: path
          required: true
          type: string
        - name: candidate
          in: body
          schema:
            $ref: '#/definitions/candidate'
      responses:
        '201':
          description: Created
          schema:
            $ref: '#/definitions/response'
        '401':
          description: Unauthorized
          schema:
            $ref: '#/definitions/response'
  /admin/candidates/{id}:
    put:
      tags:
        - CRUD Candidates
      summary: Update a candidate
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: id
          in: path
          required: true
          type: string
        - name: ballot
          in: body
          description: A candidate
          schema:
            $ref: '#/definitions/candidate'
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/response'
        '401':
          description: Unauthorized
          schema:
            $ref: '#/definitions/response'
    delete:
      tags:
        - CRUD Candidates
      summary: Delete a candidate
      produces:
        - application/json
      parameters:
        - name: id
          in: path
          required: true
          type: string
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/response'
        '401':
          description: Unauthorized
          schema:
            $ref: '#/definitions/response'

  /token:
    post:
      tags:
        - Authentication
      summary: Trade credentials for an access token
      consumes:
        - application/x-www-form-urlencoded
      produces:
        - application/json
      parameters:
        - name: grant_type
          in: formData
          type: string
          enum: ["password","otp"]
          required: true
        - name: response_type
          in: formData
          type: string
          required: false
          enum: ["code","token"]
        - name: state
          in: formData
          type: string
          required: false
          description: Used by the 'otp' grant type to maintain state between during an OTP callback.
        - name: username
          in: formData
          type: string
          description: Used by the 'password' grant type to authenticate the resource owner.
        - name: password
          in: formData
          type: string
          required: false
          description: Used by the 'password' grant type to authenticate the resource owner.
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/token'
        '401':
          description: Unauthorized
          schema:
            $ref: '#/definitions/response'

  /subjects:
    post:
      tags:
        - Account
      summary: Add a subject (enrollment)
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: body
          in: body
          required: true
          schema:
            type: object
            required:
              - username
            properties:
              username:
                type: string
              password:
                type: string
      responses:
        '201':
          description: Created
          schema:
            allOf:
              - $ref: '#/definitions/response'
              - properties:
                  totp_uri:
                    type: string
  /activate/{key}:
    get:
      tags:
        - Account
      summary: Activate a subject (email verification)
      produces:
        - application/json
      parameters:
        - name: key
          in: path
          required: true
          type: string
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/response'
        '404':
          description: Not Found
          schema:
            $ref: '#/definitions/response'
    put:
      tags:
        - Account
      summary: Activates a subject (TOTP enrollment, password reset)
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: key
          in: path
          required: true
          type: string
        - name: body
          in: body
          required: true
          schema:
            type: object
            properties:
              value:
                description: the new password, or the current OTP
                type: string
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/response'
        '404':
          description: Not Found
          schema:
            $ref: '#/definitions/response'

  /admin/subject/{id}/principals:
    get:
      tags:
        - Account
      summary: Principals for a subject
      description: Used by authenticated users to manage their principal data
      produces:
        - application/json
      parameters:
        - name: id
          in: path
          required: true
          type: string
      responses:
        '200':
          description: OK
          schema:
            allOf:
              - $ref: '#/definitions/response'
              - properties:
                  principals:
                    type: array
                    items:
                      $ref: '#/definitions/principal'
        '401':
          description: Unauthorized
          schema:
            $ref: '#/definitions/response'
    post:
      tags:
        - Account
      summary: Add a principal to a subject
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: id
          in: path
          required: true
          type: string
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/principal'
      responses:
        '201':
          description: Created
          schema:
            $ref: '#/definitions/response'
        '401':
          description: Unauthorized
          schema:
            $ref: '#/definitions/response'
  /admin/principals/{id}:
    put:
      tags:
        - Account
      summary: Update a principal
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: id
          in: path
          required: true
          type: string
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/principal'
      responses:
        '201':
          description: OK
          schema:
            $ref: '#/definitions/response'
        '401':
          description: Unauthorized
          schema:
            $ref: '#/definitions/response'
    delete:
      tags:
        - Account
      summary: Delete a principal
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: id
          in: path
          required: true
          type: string
      responses:
        '201':
          description: OK
          schema:
            $ref: '#/definitions/response'
        '401':
          description: Unauthorized
          schema:
            $ref: '#/definitions/response'

definitions:
  response:
    type: object
    required:
      - success
    properties:
      success:
        type: boolean
        required: true
        description: the value of which indicates whether a given request succeeded or failed
      error:
        type: string
        enum: ["access_denied", "mfa_required", "server_error", "not_found", "conflict"]
        required: false
        description: contains an error code for exception handling
      message:
        type: string
        required: false
        description: contains a response message for exception handling
      type:
        type: string
        required: false
        description: the type of the model to be created from the data
      total:
        type: integer
        required: false
        description: the total number of records in the dataset (when paging)

  token:
    type: object
    properties:
      access_token:
        type: string
        required: true
      token_type:
        type: string
        required: true
        enum: ["Bearer"]
      expires_in:
        type: integer
        required: true

  principal:
    type: object
    required:
      - kind
      - value
    properties:
      kind:
        description: the type of principal (some are for only voters, some are only for election officials)
        type: string
        enum: ['challenge_response', 'credit_card', 'dob', 'email',  'identity_card', 'opaque', 'password', 'phone', 'postal_address', 'structured_address', 'totp', 'username']
      value:
        type: object
        additionalProperties:
          type: string
      seq:
        type: integer

  voter_ballot:
    type: object
    required:
      - id
      - title
      - description
      - start
      - end
      - method
      - electing
      - candidates
    description: A ballot
    properties:
      id:
        type: string
      title:
        type: string
      description:
        type: string
      start:
        type: string
        format: datetime
      end:
        type: string
        format: datetime
      method:
        description: how are the ballots counted
        type: string
        enum: ['scottish_stv','meek_stv','plurality','approval', 'condorcet']
      quota:
        type: string
        enum: ['droop','hare','plurality','imperator', 'hagenback-bischoff']
      electing:
        description: how many candidates are being elected
        type: integer
      shuffled:
        description: should canditates be presented in a shuffled order
        type: boolean
        default: false
      candidates:
        type: array
        items:
          type: object
          required:
            - name
          properties:
            name:
              type: string
            description:
              type: string
            status:
              type: string
              enum: ['withdrawn','elected','excluded','hopeful']

  ward:
    type: object
    required:
      - id
      - name
    properties:
      id:
        description: ward identifier
        type: string
      parent_id:
        description: parent ward identifier, null for elections
        type: string
      type:
        description: the type of ward
        type: string
        enum: ['election','poll','count']
      ext_id:
        description: external identifier
        type: string
      name:
        description: the name of the ward
        $ref: '#definitions/localized_string'
      description:
        description: a description of the ward
        $ref: '#definitions/localized_string'
      start_time:
        description: when voting opens, null to inherit
        type: string
        format: datetime
      end_time:
        description: when voting closes, null to inherit
        type: string
        format: datetime
      leaf:
        description: this ward has no children
        type: boolean

  ballot:
    type: object
    properties:
      id:
        description: ballot identifier
        type: string
      ext_id:
        description: external identifier
        type: string
      name:
        description: the name of the ballot
        $ref: '#/definitions/localized_string'
      description:
        description: the description of the ballot
        $ref: '#/definitions/localized_string'
      method:
        description: the type of ballot
        type: string
        enum: ['SSTV', 'MSTV', 'plurality', 'approval']
      quota:
        description: the quota to use
        type: string
        enum: ['droop', 'hare', 'imperator', 'hagenback-bischoff']
      seq:
        description: used to sort ballots in a ward
        type: integer
      electing:
        description: how many candidates to elect
        type: integer
      shuffle:
        description: should candidates be presented in random order
        type: boolean
      mutable:
        description: should voters be able to change their vote
        type: boolean
      color:
        description: the background color of the card
        type: string

  candidate:
    type: object
    properties:
      id:
        description: candidate identifier
        type: string
      ext_id:
        description: external identifier
        type: string
      name:
        description: the name of the candidate
        $ref: '#definitions/localized_string'
      description:
        description: a description of the candidate (eg. party affiliation)
        $ref: '#definitions/localized_string'
      seq:
        description: used to sort candidates on a ballot
        type: integer
      widthdrawn:
        description: the candidate is no longer running
        type: boolean

  voter:
    type: object
    properties:
      id:
        description: voter identifier
        type: string
      ext_id:
        description: external voter identifier
        type: string
      ward_ext_id:
        description: external ward identifier
        type: string
      identity:
        description: values voters use to verify their identity, and values used to deliver ballots
        type: array
        items:
          $ref: '#/definitions/principal'

  result:
    type: object
    properties:
      candidate:
        type: string
      round:
        type: integer
      status:
        type: string
        enum: ['elected', 'excluded']
      votes:
        type: integer
      surplus:
        type: integer
      exhausted:
        type: integer

  localized_string:
    type: object
    additionalProperties:
      type: string
    example:
      en: 'example'
      fr: 'exemple'
      es: 'ejemplo'
