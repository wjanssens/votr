swagger: '2.0'
info:
  title: Vote API
  description: This is an API specification to support voting.
  version: v1.0
schemes:
  - https
paths:
  /voters/{id}:
    get:
      tags:
        - Voters
      summary: All the ballots for a voter
      produces:
        - application/json
      parameters:
        - name: id
          in: path
          description: 'Ballot ID'
          required: true
          type: string
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/voter_ballot_response'
    post:
      tags:
        - Voter
      summary: Cast or update ballots
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: id
          in: path
          description: 'Ballot ID'
          required: true
          type: string
        - name: ballot
          in: body
          description: A ballot with votes.
          schema:
            $ref: '#/definitions/voter_ballot_request'
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/response'
        '400':
          description: Bad request
          schema:
            $ref: '#/definitions/response'

  /ballots/{id}/votes:
    get:
      tags:
        - Public
      summary: A log of all votes cast
      produces:
        - application/json
        - text/plain
      parameters:
        - name: id
          in: path
          required: true
          type: string
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/votes_response'
  /ballots/{id}/result:
    get:
      tags:
        - Public
      summary: Summary of the election results
      produces:
        - application/json
      parameters:
        - name: id
          in: path
          required: true
          type: string
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/results_response'
  /wards:
    get:
      tags:
        - Election Officials
      summary: All elections (top-level wards) and their child wards
      produces:
        - application/json
      responses:
        '200':
          description: OK
          schema:
            allOf:
              - $ref: '#/definitions/response'
              - properties:
                  wards:
                    type: array
                    items:
                      $ref: '#/definitions/ward'
        '401':
          description: Unauthorized
          schema:
            $ref: '#/definitions/response'
    post:
      tags:
        - Election Officials
      summary: Add a new election
      parameters:
        - name: ward
          in: body
          schema:
            $ref: '#/definitions/ward'
      responses:
        '201':
          description: Created
          schema:
            $ref: '#/definitions/response'
        '401':
          description: Unauthorized
          schema:
            $ref: '#/definitions/response'
  /wards/{id}:
    put:
      tags:
        - Election Officials
      summary: Update a ward
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: id
          in: path
          required: true
          type: string
        - name: ward
          in: body
          description: A ward
          schema:
            $ref: '#/definitions/ward'
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/response'
        '401':
          description: Unauthorized
          schema:
            $ref: '#/definitions/response'
    delete:
      tags:
        - Election officials
      summary: Delete a ward
      produces:
        - application/json
      parameters:
        - name: id
          in: path
          required: true
          type: string
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/response'
        '401':
          description: Unauthorized
          schema:
            $ref: '#/definitions/response'
  /wards/{id}/ballots:
    get:
      tags:
        - Election Officials
      summary: Ballots for a ward
      produces:
        - application/json
      parameters:
        - name: id
          in: path
          required: true
          type: string
      responses:
        '200':
          description: OK
          schema:
            allOf:
              - $ref: '#/definitions/response'
              - properties:
                  ballots:
                    type: array
                    items:
                      $ref: '#/definitions/ballot'
        '401':
          description: Unauthorized
          schema:
            $ref: '#/definitions/response'
    post:
      tags:
        - Election Officials
      summary: Add a ballot to a ward
      parameters:
        - name: id
          in: path
          required: true
          type: string
        - name: ballot
          in: body
          schema:
            $ref: '#/definitions/ballot'
      responses:
        '201':
          description: Created
          schema:
            $ref: '#/definitions/response'
        '401':
          description: Unauthorized
          schema:
            $ref: '#/definitions/response'
  /ballots/{id}:
    get:
      tags:
        - Election Officials
      summary: A ballot
      produces:
        - application/json
      parameters:
        - name: id
          in: path
          required: true
          type: string
      responses:
        '200':
          description: OK
          schema:
            allOf:
              - $ref: '#/definitions/response'
              - properties:
                  ballots:
                    type: array
                    items:
                      $ref: '#/definitions/ballot'
        '401':
          description: Unauthorized
          schema:
            $ref: '#/definitions/response'
    put:
      tags:
        - Election Officials
      summary: Update a ballot
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: id
          in: path
          required: true
          type: string
        - name: ballot
          in: body
          description: A ballot
          schema:
            $ref: '#/definitions/ballot'
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/response'
        '401':
          description: Unauthorized
          schema:
            $ref: '#/definitions/response'
    delete:
      tags:
        - Election officials
      summary: Delete a ballot
      produces:
        - application/json
      parameters:
        - name: id
          in: path
          required: true
          type: string
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/response'
        '401':
          description: Unauthorized
          schema:
            $ref: '#/definitions/response'
  /ballots/{id}/candidates:
    get:
      tags:
        - Election Officials
      summary: Candidates for a ballot
      produces:
        - application/json
      parameters:
        - name: id
          in: path
          required: true
          type: string
      responses:
        '200':
          description: OK
          schema:
            allOf:
              - $ref: '#/definitions/response'
              - properties:
                  ballots:
                    type: array
                    items:
                      $ref: '#/definitions/candidate'
        '401':
          description: Unauthorized
          schema:
            $ref: '#/definitions/response'
    post:
      tags:
        - Election Officials
      summary: Add a candidate to a ballot
      parameters:
        - name: id
          in: path
          required: true
          type: string
        - name: candidate
          in: body
          schema:
            $ref: '#/definitions/candidate'
      responses:
        '201':
          description: Created
          schema:
            $ref: '#/definitions/response'
        '401':
          description: Unauthorized
          schema:
            $ref: '#/definitions/response'
  /candidates/{id}:
    put:
      tags:
        - Election Officials
      summary: Update a candidate
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: id
          in: path
          required: true
          type: string
        - name: ballot
          in: body
          description: A candidate
          schema:
            $ref: '#/definitions/candidate'
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/response'
        '401':
          description: Unauthorized
          schema:
            $ref: '#/definitions/response'
    delete:
      tags:
        - Election officials
      summary: Delete a candidate
      produces:
        - application/json
      parameters:
        - name: id
          in: path
          required: true
          type: string
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/response'
        '401':
          description: Unauthorized
          schema:
            $ref: '#/definitions/response'
  /token:
    post:
      tags:
        - Authentication
      consumes:
        - application/x-www-form-urlencoded
      produces:
        - application/json
      parameters:
        - name: grant_type
          in: formData
          type: string
        - name: client_id
          in: formData
          type: string
        - name: client_secret
          in: formData
          type: string
        - name: username
          in: formData
          type: string
        - name: password
          in: formData
          type: string
        - name: redirect_uri
          in: formData
          type: string
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/token'
        '401':
          description: Unauthorized
          schema:
            $ref: '#/definitions/response'

  /subjects:
    post:
      tags:
        - Account
      summary: Add a subject (enrollment)
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: body
          in: body
          required: true
          schema:
            type: object
            properties:
              username:
                type: string
              password:
                type: string
      responses:
        '201':
          description: Created
          schema:
            $ref: '#/definitions/response'
        '401':
          description: Unauthorized
          schema:
            $ref: '#/definitions/response'
  /activate/{token}:
    get:
      tags:
        - Account
      summary: Activate a subject (email verification)
      produces:
        - application/json
      parameters:
        - name: token
          in: path
          required: true
          type: string
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/response'
        '404':
          description: Not Found
          schema:
            $ref: '#/definitions/response'
  /subject/{id}/principals:
    get:
      tags:
        - Account
      summary: Principals for a subject
      description: Used by authenticated users to manage their principal data
      produces:
        - application/json
      parameters:
        - name: id
          in: path
          required: true
          type: string
      responses:
        '200':
          description: OK
          schema:
            allOf:
              - $ref: '#/definitions/response'
              - properties:
                  principals:
                    type: array
                    items:
                      $ref: '#/definitions/principal'
        '401':
          description: Unauthorized
          schema:
            $ref: '#/definitions/response'
    post:
      tags:
        - Account
      summary: Add a principal to a subject
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: id
          in: path
          required: true
          type: string
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/principal'
      responses:
        '201':
          description: Created
          schema:
            $ref: '#/definitions/response'
        '401':
          description: Unauthorized
          schema:
            $ref: '#/definitions/response'
  /principals/{id}:
    put:
      tags:
        - Account
      summary: Update a principal
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: id
          in: path
          required: true
          type: string
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/principal'
      responses:
        '201':
          description: OK
          schema:
            $ref: '#/definitions/response'
        '401':
          description: Unauthorized
          schema:
            $ref: '#/definitions/response'
    delete:
      tags:
        - Account
      summary: Delete a principal
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: id
          in: path
          required: true
          type: string
      responses:
        '201':
          description: OK
          schema:
            $ref: '#/definitions/response'
        '401':
          description: Unauthorized
          schema:
            $ref: '#/definitions/response'

definitions:
  response:
    type: object
    required:
      - success
    properties:
      success:
        type: boolean
        description: the value of which indicates whether a given request succeeded or failed
      message:
        type: string
        description: contains a response message for exception handling
      type:
        type: string
        description: the type of the model to be created from the data
      total:
        type: integer
        description: the total number of records in the dataset (when paging)

  token:
    type: object
    properties:
      access_token:
        type: string
      token_type:
        type: string
      expires_in:
        type: integer
      refresh_token:
        type: string
      example_parameter:
        type: string

  principal:
    type: object
    required:
      - type
      - value
    properties:
      type:
        type: string
      value:
        type: string
      seq:
        type: integer

  voter_ballot_response:
    allOf:
      - $ref: '#/definitions/response'
      - properties:
          ballots:
            type: array
            items:
              type: object
              required:
                - id
                - title
                - start_time
                - end_time
                - ranked
                - authentication
                - electing
                - candidates
              description: A ballot
              properties:
                id:
                  type: string
                title:
                  type: string
                description:
                  type: string
                instructions:
                  type: string
                start_time:
                  type: string
                  format: datetime
                end_time:
                  type: string
                  format: datetime
                type:
                  default: 'partial_rank'
                  description: different types of counting have different requirements
                  type: string
                  enum: ['partial_rank','full_rank','unranked','approval']
                background_color:
                  description: the background color of the ballot
                  type: string
                banner_img:
                  type: string
                  description: an image that will appear above the ballot
                authentication:
                  type: object
                  required:
                    - required
                    - challenges
                  properties:
                    required:
                      type: integer
                      description: the number of challenge responses required
                    challenges:
                      type: array
                      items:
                        type: string
                        description: a localized description of the challenge
                electing:
                  description: how many candidates are being elected
                  type: integer
                shuffle:
                  description: should canditates be presented in a shuffled order
                  type: boolean
                  default: false
                candidates:
                  type: array
                  items:
                    type: object
                    required:
                      - name
                    properties:
                      name:
                        type: string
                        description: the name of the candidate
                      affiliation:
                        type: string
                        description: the affiliation of the candidate

  voter_ballot_request:
    type: array
    items:
      type: object
      required:
        - ranking
        - identity
      properties:
        ranking:
          description: a ranking of candidates
          type: array
          items:
            type: integer
        identity:
          description: an array of SHA-512 hashes
          type: array
          items:
            type: string

  ward:
    type: object
    required:
      - id
      - res_id
      - name
    properties:
      id:
        description: ward identifier
        type: string
      parent_id:
        description: parent ward identifier, null for elections
        type: string
      res_id:
        description: resource identifier
        type: string
      ext_id:
        description: external identifier
        type: string
      name:
        description: the name to show in the tree
        type: string
      start_time:
        description: when voting opens, null to inherit
        type: string
        format: datetime
      end_time:
        description: when voting closes, null to inherit
        type: string
        format: datetime
      leaf:
        description: this ward has no children
        type: boolean

  ballot:
    type: object
    properties:
      id:
        description: ballot identifier
        type: string
      ward_id:
        description: ward identifier
        type: string
      res_id:
        description: resource identifier
        type: string
      ext_id:
        description: external identifier
        type: string
      kind:
        description: the type of ballot
        type: string
        enum: ['unranked', 'fully_ranked', 'partially_ranked', 'approval']
      seq:
        description: used to sort ballots in a ward
        type: integer
      elect:
        description: how many candidates to elect
        type: integer
      shuffle:
        description: should candidates be presented in random order
        type: boolean
      mutable:
        description: should voters be able to change their vote
        type: boolean
      color:
        description: the background color of the card
        type: string

  candidate:
    type: object
    properties:
      id:
        description: candidate identifier
        type: string
      ballot_id:
        description: ballot identifier
        type: string
      ext_id:
        description: external identifier
        type: string
      seq:
        description: used to sort candidates on a ballot
        type: integer
      widthdrawn:
        description: the candidate is no longer running
        type: boolean
      color:
        description: color to use in result charts
        type: string

  votes_response:
    allOf:
      - $ref: '#/definitions/response'
      - properties:
          votes:
            type: array
            items:
              type: string

  results_response:
    allOf:
      - $ref: '#/definitions/response'
      - properties:
          results:
            type: array
            items:
              type: object
              properties:
                candidate:
                  type: string
                round:
                  type: integer
                status:
                  type: string
                  enum: ['elected', 'excluded']
                votes:
                  type: integer
                surplus:
                  type: integer
                exhausted:
                  type: integer
